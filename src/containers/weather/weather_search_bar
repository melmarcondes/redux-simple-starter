import React, {Component} from 'react';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import {fetchWeather} from "../../actions/index";


class SearchBar extends Component{

    constructor(props){
        super(props);
        this.state = {term:''};
        this.onInputChange = this.onInputChange.bind(this);
        this.onFormSubmit = this.onFormSubmit.bind(this);
    }

    onInputChange(event){
        this.setState({term: event.target.value});
    }

    onFormSubmit(event){
        event.preventDefault();
        this.props.fetchWeather(this.state.term);
        this.setState({term:''});

    }

    render(){
        return(
            <form onSubmit={this.onFormSubmit} className='input-group'>
                <input className='form-control'
                       value={this.state.term}
                       onChange={this.onInputChange}
                       placeholder='Get a five-day weather forecast in your favorite cities'/>
                <span className="input-group-btn">
                    <button type='submit' className='btn btn-secondary'>Submit</button>
                </span>
            </form>
        );
    }
};

//Anything returned from this function will end up as props on the SearchBar container
function mapDispatchToProps(dispatch){
    //whenever fetchWeather is called, the result should be passed to all of our reducers
    return bindActionCreators({fetchWeather: fetchWeather}, dispatch);
}

//we are passing null as first argument because we don't care about the state, we just would like to execute dispatch function
export default connect(null, mapDispatchToProps)(SearchBar)